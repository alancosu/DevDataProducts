rm(list=ls())
q()
install.packages("gbm")
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
mdlrf <- train(diagnosis ~., data = training, method = "rf")
mdlgbm <- train(diagnosis ~., data = training, method = "gbm")
mdllda <- train(diagnosis ~., data = training, method = "lda")
??accuracy
library(randomForest)
?randomForest
predrf <- predict(mdlrf, training)
length(predrf)
sum(predrf == training$diagnosis)
rm(list = ls())
q()
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
mdlrf <- train(diagnosis ~., data = training, method = "rf")
mdlgbm <- train(diagnosis ~., data = training, method = "gbm", verbose = FALSE)
mdllda <- train(diagnosis ~., data = training, method = "lda")
predrf <- predict(mdlrf, training)
sum(predrf == training$diagnosis)
predgbm <- predict(mdlgbm, training)
sum(predgbm == training$diagnosis)
?predict
predrf <- predict(mdlrf, newdata = training)
sum(predrf == training$diagnosis)
predlda <- predict(mdllda, training)
View(predlda)
View(predgbm)
View(data.frame(cbind(predrf, predgbm, predlda)))
predrf <- predict()
predrf <- predict(mdlrf, testing)
predgbm <- predict(mdlgbm, testing)
predlda <- predict(mdllda, testing)
sum(predrf == predgbm)
mdlStack <- train(testing$diagnosis ~ ., data = data.frame(testing$diagnosis, predrf, predgbm, predlda), method = "rf")
mdlStack <- train(testing$diagnosis ~ ., data = data.frame(diagnosis = testing$diagnosis, predrf, predgbm, predlda)), method = "rf")
mdlStack <- train(diagnosis ~ ., data = data.frame(diagnosis = testing$diagnosis, predrf, predgbm, predlda)), method = "rf")
mdlStack <- train(diagnosis ~ ., data = data.frame(diagnosis = testing$diagnosis, predrf, predgbm, predlda), method = "rf")
predStack <- predict(mdlStack, testing)
mean(testing$diagnosis == predStack)
mean(testing$diagnosis == predrf)
mean(testing$diagnosis == predgbm)
mean(testing$diagnosis == predlda)
rm(list=ls())
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
str(training)
mdl <- train(CompressiveStrength ~., data = training, method = "lasso")
mdl
library(elasticnet)
?elasticnet
plot(mdl)
summary(mdl)
?enet
plot.enet(mdl)
?plot.enet
plot(mdl, xvar = "step")
par(mfrow = c(2,2))
plot(mdl)
class(mdl)
enet(training[,-9], training$CompressiveStrength, lambda = 0)
enet(x = training[,-9], y = training$CompressiveStrength, lambda = 0)
plot(mdl)
coef(mdl)
mdl$coefnames
mdl$modelInfo
mdl$finalModel
plot(mdl$finalModel)
dev.off()
plot(mdl$finalModel)
class(mdl$finalModel)
plot(mdl$finalModel, xvar = "step")
plot(mdl$finalModel, xvar = "penalty")
rm(list = ls())
read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
jeff <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
library(lubridate)
str(jeff)
training = jeff[year(jeff$date) < 2012,]
testing = jeff[(year(jeff$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
?ts
install.packages("forecast")
library(forecast)
?bats
mdl <- bats(tstrain)
fc <- forecast(mdl, testing)
?forecast
tail(jeff)
fc <- forecast(mdl)
summary(fc)
fc <- forecast(mdl, 235)
accuracy(fc, testing)
tsTest <- ts(testing$visitsTumblr)
accuracy(fc, tsTest)
fc <- forecast(mdl)
accuracy(fc, tsTest)
plot(fc)
fc <- forecast(mdl, 235)
plot(fc)
names(tsTest)
head(tsTest)
head(tstrain)
?ts
tsTest <- ts(testing$visitsTumblr, start = 366)
accuracy(fc, tsTest)
?accuracy
?bats
accuracy(mdl, tsTest)
accuracy(fc, tsTest)
head(fc$fitted)
fcast <- fc$fitted
rm(fcast)
dim(fc$lower)
mean((fc$upper - tsTest) > fc$lower)
rm(list = ls())
set.seed(3523)
library(AppliedPredictiveModeling)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
data("concrete")
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
?e1071
library(e1071)
?e1071
str(training)
mdl <- svm(CompressiveStrength ~., data = training)
pred <- predict(mdl, testing)
sqrt(sum(pred - testing$CompressiveStrength)^2)
sqrt(sum((pred - testing$CompressiveStrength)^2))
sqrt(sum((pred - testing$CompressiveStrength)^2)/256)
rm(list=ls())
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
mdlrf <- train(diagnosis ~., data = training, method = "rf")
mdlgbm <- train(diagnosis ~., data = training, method = "gbm", verbose = FALSE)
mdllda <- train(diagnosis ~., data = training, method = "lda")
predrf <- predict(mdlrf, training)
predgbm <- predict(mdlgbm, training)
predlda <- predict(mdllda, training)
predrf <- predict(mdlrf, testing)
predgbm <- predict(mdlgbm, testing)
predlda <- predict(mdllda, testing)
mean(testing$diagnosis == predrf)
mean(testing$diagnosis == predgbm)
mean(testing$diagnosis == predlda)
mdlStack <- train(diagnosis ~ ., data = data.frame(diagnosis = testing$diagnosis, predrf, predgbm, predlda), method = "rf")
mdlStack
mdlrf
predStack <- predict(mdlStack, testing)
mean(testing$diagnosis == predStack)
predrf <- predict(mdlrf, training)
predgbm <- predict(mdlgbm, training)
predlda <- predict(mdllda, training)
mdlStack <- train(diagnosis ~ ., data = data.frame(diagnosis = testing$diagnosis, predrf, predgbm, predlda), method = "rf")
mdlStack <- train(diagnosis ~ ., data = data.frame(diagnosis = training$diagnosis, predrf, predgbm, predlda), method = "rf")
predStack <- predict(mdlStack, testing)
mean(testing$diagnosis == predStack)
mdlStack
predrf <- predict(mdlrf, testing)
class(mdlStack)
length(predStack)
mdlStack$finalModel
mdlrf$finalModel
install.packages("xkcd")
library(xkcd)
?xkcd
library(randomForest)
predrf <- predict(mdlrf, testing)
predgbm <- predict(mdlgbm, testing)
predlda <- predict(mdllda, testing)
cm <- randomForest(data.frame(predrf, predgbm, predlda))
cm <- randomForest(data.frame(predrf, predgbm, predlda), training$diagnosis)
rm(cm)
cm <- randomForest(data.frame(predrf, predgbm, predlda), testing$diagnosis)
predcm <- predict(cm, data.frame(predrf, predgbm, predlda, diagnosis = testing$diagnosis))
mean(testing$diagnosis == predcm)
predStack <- predict(mdlStack, data.frame(predrf, predgbm, predlda, diagnosis = testing$diagnosis))
mean(testing$diagnosis == predStack)
mdllda <- train(diagnosis ~., data = training, method = "lda", preProcess = c("scale", "centre"))
mdllda <- train(diagnosis ~., data = training, method = "lda", preProcess = c("scale", "center"))
predlda
predlda <- predict(mdllda, testing)
mean(predlda == testing$diagnosis)
predrf <- predict(mdlrf, training)
predgbm <- predict(mdlgbm, training)
predlda <- predict(mdllda, training)
mean(testing$diagnosis == predrf)
mean(testing$diagnosis == predgbm)
cm <- randomForest(data.frame(predrf, predgbm, predlda), training$diagnosis)
predrf <- predict(mdlrf, testing)
predgbm <- predict(mdlgbm, testing)
predlda <- predict(mdllda, testing)
predcm <- predict(cm, data.frame(predrf, predgbm, predlda, diagnosis = testing$diagnosis))
mean(testing$diagnosis == predcm)
rm(list=ls())
testing <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
training <- testing
testing <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
str(testing)
names(testing)
summary(training$X)
blah <- read.csv("http://web.archive.org/web/20161224072740/http://groupware.les.inf.puc-rio.br/static/WLE/WearableComputing_weight_lifting_exercises_biceps_curl_variations.csv")
head(blah)
rm(blah)
library(readr)
WearableComputing_weight_lifting_exercises_biceps_curl_variations <- read_csv("WearableComputing_weight_lifting_exercises_biceps_curl_variations.csv")
View(WearableComputing_weight_lifting_exercises_biceps_curl_variations)
blah <- WearableComputing_weight_lifting_exercises_biceps_curl_variations
rm(WearableComputing_weight_lifting_exercises_biceps_curl_variations)
rm(blah)
summary(testing$problem_id)
training$classe
summary(training$classe)
q()
rm(list=ls())
install.packages("shiny")
install.packages("bootstrap")
library(shiny)
?builder
runApp('binomRuns/binomRuns')
setwd("C:/Users/Alan/datasciencecoursera/R")
mtcars
install.packages("miniUI")
library(shiny)
library(miniUI)
myFirstGadget <- function() {
ui <- miniPage(
gadgetTitleBar("My First Gadget")
)
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, {
stopApp()
})
}
runGadget(ui, server)
}
runGadget()
myFirstGadget()
myFirstGadget()
install.packages("googleVis")
install.packages("plotly")
library(tidyverse)
library(plotly)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
head(time(EuStockMarkets))
head(as.date(time(EuStockMarkets)))
library(lubridate)
class(time(EuStockMarkets))
x <- as_date(time(EuStockMarkets))
x <- julian(time(EuStockMarkets))
x <- as.POSIXct(time(EuStockMarkets))
x <- as.POSIXlt(time(EuStockMarkets))
head(time(EuStockMarkets))
?as.Date.numeric
as.Date(head(time(EuStockMarkets)), origin = 0)
as.Date(head(time(EuStockMarkets)), origin = "00/00/00")
as.Date(head(time(EuStockMarkets)), origin = "0001-01-01")
1991-6
as.Date(head(time(EuStockMarkets)), origin = "1970-01-01")
365*.504
365*.5
rm(list=ls())
q()
?predict
?lm
library(shiny)
setwd("C:/Users/Alan/datasciencecoursera/R/binomRuns/binomRuns")
runApp()
source('C:/Users/Alan/datasciencecoursera/R/binomRuns/binomRuns/runs.R')
manipulate(plot(runCounts(n, 1000, p, m = 20)), p = slider(0.5, 0.99),
n = picker(5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100))
library(manipulate)
manipulate(plot(runCounts(n, 1000, p, m = 20)), p = slider(0.5, 0.99),
n = picker(5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100))
runApp()
runApp()
runCounts(200, 2000)
source('C:/Users/Alan/datasciencecoursera/R/binomRuns/binomRuns/runs.R')
runCounts(200, 2000)
source('C:/Users/Alan/datasciencecoursera/R/binomRuns/binomRuns/runs.R')
source('C:/Users/Alan/datasciencecoursera/R/binomRuns/binomRuns/runs.R')
runCounts(200, 2000)
1000 - runCounts(200, 1000)
1000 - runCounts(20, 1000)
1000 - runCounts(10, 1000)
?plot
x <- runCounts(20, 1000)
plot(x, xaxt = names(x))
?axis
plot(x, xaxt = "n")
axis(1, at = names(x))
plot(x, xaxt = "n")
axis(1, at = length(x)
)
dev.off()
plot(x, xaxt = "n")
axis(1, at = seq(1:length(x)))
axis(1, at = seq(1:length(x)), labels = names(x))
names(x)
dev.off()
plot(x, xaxt = "n")
axis(1, at = seq(1:length(x)), labels = names(x))
dev.off()
plot(x, xaxt = axis(1, at = seq(1:length(x)), labels = names(x)))
?xaxt
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderTable
library(xtable)
?xtable
runApp()
runApp()
?rep
rep("?|", 20)
c(rep("?|", 20))
x <- c(rep("?|", 20))
paste0(x)
runApp()
?renderPlot
runApp()
?plotOutput
runApp()
runApp()
runApp()
ui <- basicPage(
plotOutput("plot1",
click = "plot_click",
dblclick = "plot_dblclick",
hover = "plot_hover",
brush = "plot_brush"
),
verbatimTextOutput("info")
)
server <- function(input, output) {
output$plot1 <- renderPlot({
plot(mtcars$wt, mtcars$mpg)
})
output$info <- renderText({
xy_str <- function(e) {
if(is.null(e)) return("NULL\n")
paste0("x=", round(e$x, 1), " y=", round(e$y, 1), "\n")
}
xy_range_str <- function(e) {
if(is.null(e)) return("NULL\n")
paste0("xmin=", round(e$xmin, 1), " xmax=", round(e$xmax, 1),
" ymin=", round(e$ymin, 1), " ymax=", round(e$ymax, 1))
}
paste0(
"click: ", xy_str(input$plot_click),
"dblclick: ", xy_str(input$plot_dblclick),
"hover: ", xy_str(input$plot_hover),
"brush: ", xy_range_str(input$plot_brush)
)
})
}
shinyApp(ui, server)
rm(ui)
rm(server)
runApp()
runApp()
?verbatimTextOutput
runApp()
runApp()
runApp()
runApp()
runApp()
cts <- runCounts(20, 1000)
library(ggplot2)
qplot
qplot(cts)
qplot(x = names(cts), y = cts)
qplot
qplot(cts, geom = "points")
?qplot
qplot(cts, geom = "point")
runApp()
?reactive
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?min
runApp()
runApp()
runApp()
runApp()
hover <- c(x = 5, y = 0.5)
dist <- sqrt((hover$y - cts())^2 + ((hover$x - 1:length(cts()))/10)^2)
hover$y
hover <- as.list(hover)
dist <- sqrt((hover$y - cts())^2 + ((hover$x - 1:length(cts()))/10)^2)
dist <- sqrt((hover$y - cts)^2 + ((hover$x - 1:length(cts)/10)^2)
)
dist
hover
y <- hover$y - cts
y
dist <- sqrt((hover$y - cts/1000)^2 + ((hover$x - 1:length(cts)/10)^2)
)
dist
y <- hover$y - cts/1000
y
y2 <- y^2
y2
x <- hover$x - 1:length(cts)/10
x
x <- (hover$x - 1:length(cts))/10
x
x2 <- x^2
x2
d <- sqrt(x2 + y2)
d
dist <- sqrt((hover$y - cts/1000)^2 + ((hover$x - 1:length(cts))/10)^2)
dist
cts
hover$y <- 0.744
dist <- sqrt((hover$y - cts/1000)^2 + ((hover$x - 1:length(cts))/10)^2)
dist
runApp()
runApp()
?plotOutput
runApp()
runApp()
runApp()
?numericInput
runApp()
runApp()
?verbatimTextOutput
runApp()
runApp()
runApp()
?renderText
runApp()
runApp()
runApp()
?numericInput
runApp()
install.packages("rsconnect")
rsconnect::setAccountInfo(name='acos', token='CCDCBE8EE5660AC12D0EB6F506185ABC', secret='OFBnkwBN8Xf2Ilad2SSEn/my3xqvnQtilGC17OLq')
runApp()
plot(rpois(1000, 0.5))
plot(rpois(1000, 1))
plot(t(rpois(1000, 1)))
x <- rpois(1000, 0.5)
head(x)
summary(x)
table(x)
plot(table(x))
?rpois
runApp()
runApp()
runApp()
rm(list=ls())
setwd("C:/Users/Alan/datasciencecoursera/R/datascience/DevDataProducts/DevDataProducts")
q()
